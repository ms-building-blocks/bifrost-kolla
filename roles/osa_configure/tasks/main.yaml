---
- name: ensure openstack-ansible config directories exists
  file:
    path: "{{ osa_etc_path }}"
    state: directory
- name: ensure openstack-ansible certificate directories exists
  file:
    path: "{{ osa_etc_path }}/certs"
    state: directory
    owner: root
    group: root
    mode: "u=rwx,g=,o="
  when: os_basic.own_certs | bool
- name: Copy etc/openstack_deploy
  shell: "cp -rf openstack_deploy/* {{ osa_etc_path }}"
  args:
    chdir: "{{ osa_path }}/etc/"
    creates: "{{ osa_etc_path }}/user_variables.yml"
- name: Generate pw-tokens
  shell: >
    /usr/bin/python pw-token-gen.py --file
    {{ osa_etc_path }}/user_secrets.yml
  args:
    chdir: "{{ osa_path }}/scripts/"
    creates: "{{ osa_etc_path }}/user_secrets.yml"
- name: push certificates
  copy:
    content: "{{ item.content }}"
    dest: "{{ osa_etc_path }}/certs/{{ item.name }}"
    owner: root
    group: root
    mode: "u=rw,g=r,o="
  with_items:
  # Certificates are stored encrypted in vars/certificates.yml
    - "{{ certificates }}"
  when: os_basic.own_certs | bool
- name: get nodes ips
  set_fact:
    nodes_ip: >
      {{ nodes |
      node_ips(net_config[xci.network_mapping['br-mgmt']].network,
               ip_shift) }}
- name: get role nodes
  set_fact:
    role2nodes: "{{ xci.nodes_roles | role2nodes() }}"
- name: set designate skeleton config
  template:
    src: "designate.yml.j2"
    dest: "{{ osa_etc_path }}/conf.d/designate.yml"
- name: set user_variables.yml
  template:
    src: "user_variables.yml.j2"
    dest: "{{ osa_etc_path }}/user_variables.yml"
- name: set openstack_user_config.yml
  template:
    src: "openstack_user_config.yml.prod.j2"
    dest: "{{ osa_etc_path }}/openstack_user_config.yml"
    validate: >
      cd {{ osa_path }}/playbooks/ &&
      openstack-ansible setup-infrastructure.yml --syntax-check
